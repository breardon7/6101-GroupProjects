xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=FALSE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
koi_df <- data.frame(read.csv('Kepler_Exoplanet.csv'))
length(koi_df)
koi_df1<-data.frame(subset(koi_df,select = -c(rowid,kepid,kepoi_name,kepler_name,koi_period_err1
,koi_period_err2,koi_time0bk_err1,koi_time0bk_err2,koi_impact_err1,koi_impact_err2,koi_duration_err1,koi_duration_err2,koi_depth_err1,koi_depth_err2,koi_prad_err1,koi_prad_err2,koi_teq_err1,koi_teq_err2,koi_insol_err1,koi_insol_err2,koi_steff_err1,koi_steff_err2,koi_slogg_err1,koi_slogg_err2,koi_srad_err1,koi_srad_err2,koi_tce_delivname)))
length(koi_df1)
str(koi_df1)
koi_df1 = na.exclude(koi_df1)
xkablesummary(koi_df1[3:23])
koi_df1$koi_disposition[koi_df1$koi_disposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_disposition[koi_df1$koi_disposition == "CONFIRMED"] <- 1
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "CANDIDATE"] <- 1
koi_df1$koi_disposition = as.factor(koi_df1$koi_disposition)
koi_df1$koi_pdisposition = as.factor(koi_df1$koi_pdisposition)
str(koi_df1)
View(koi_df1)
koi_df1$koi_disposition[koi_df1$koi_disposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_disposition[koi_df1$koi_disposition == "CONFIRMED"] <- 1
koi_df1$koi_disposition[koi_df1$koi_disposition == "CANDIDATE"] <- 2
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "CANDIDATE"] <- 1
koi_df1$koi_disposition = as.factor(koi_df1$koi_disposition)
koi_df1$koi_pdisposition = as.factor(koi_df1$koi_pdisposition)
str(koi_df1)
koi_df1$koi_disposition[koi_df1$koi_disposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_disposition[koi_df1$koi_disposition == "CONFIRMED"] <- 1
koi_df1$koi_disposition[koi_df1$koi_disposition == "CANDIDATE"] <- 2
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "CANDIDATE"] <- 1
koi_df1$koi_disposition = as.factor(koi_df1$koi_disposition)
koi_df1$koi_pdisposition = as.factor(koi_df1$koi_pdisposition)
str(koi_df1)
koi_df1$koi_disposition[koi_df1$koi_disposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_disposition[koi_df1$koi_disposition == "CONFIRMED"] <- 1
koi_df1$koi_disposition[koi_df1$koi_disposition == "CANDIDATE"] <- 2
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "CANDIDATE"] <- 1
koi_df1$koi_disposition = as.factor(koi_df1$koi_disposition)
koi_df1$koi_pdisposition = as.factor(koi_df1$koi_pdisposition)
str(koi_df1)
View(koi_df1)
set.seed(123)
koi_df1 <- data.frame(koi_diposition = c(sample(c("FALSE POSITIVE", "CONFIRMED", "CANDIDATE"), 20, replace = T)))
koi_df1$koi_disposition <- ifelse(koi_df1$koi_disposition == "FALSE POSITIVE", 0,
ifelse(koi_df1$koi_disposition == "CONFIRMED", 1,
ifelse(koi_df1$koi_disposition == "CANDIDATE", 2)))
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("stringi")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return HTML table for display
#' @examples
#' library("xt height = "300px"able")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos) %>%
kableExtra::scroll_box(width = "500px")
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=FALSE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
koi_df <- data.frame(read.csv('Kepler_Exoplanet.csv'))
length(koi_df)
koi_df1<-data.frame(subset(koi_df,select = -c(rowid,kepid,kepoi_name,kepler_name,koi_period_err1
,koi_period_err2,koi_time0bk_err1,koi_time0bk_err2,koi_impact_err1,koi_impact_err2,koi_duration_err1,koi_duration_err2,koi_depth_err1,koi_depth_err2,koi_prad_err1,koi_prad_err2,koi_teq_err1,koi_teq_err2,koi_insol_err1,koi_insol_err2,koi_steff_err1,koi_steff_err2,koi_slogg_err1,koi_slogg_err2,koi_srad_err1,koi_srad_err2,koi_tce_delivname)))
length(koi_df1)
str(koi_df1)
koi_df1 = na.exclude(koi_df1)
xkablesummary(koi_df1[3:23])
koi_df1$koi_disposition <- ifelse(koi_df1$koi_disposition == "FALSE POSITIVE", 0,
ifelse(koi_df1$koi_disposition == "CONFIRMED", 1,
ifelse(koi_df1$koi_disposition == "CANDIDATE", 2)))
koi_df1$koi_disposition <- ifelse(koi_df1$koi_disposition == "FALSE POSITIVE", 0,
ifelse(koi_df1$koi_disposition == "CONFIRMED", 1, 2))
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "CANDIDATE"] <- 1
koi_df1$koi_disposition = as.factor(koi_df1$koi_disposition)
koi_df1$koi_pdisposition = as.factor(koi_df1$koi_pdisposition)
str(koi_df1)
View(koi_df1)
qqnorm(koi_df1$koi_disposition, pch = 1, frame = FALSE)
koi_df1 = na.exclude(koi_df1)
xkablesummary(koi_df1[3:23], title = "Summary of the numeric")
loadPkg("ggplot2")
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = "koi_disposition"), col = "steelblue") +
geom_bar(stat = "count", aes(label = count), col = "white")
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = "koi_disposition"), col = "steelblue") +
geom_bar(stat = "count", aes(label = ..count..), col = "white")
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = "koi_disposition"), col = "steelblue") +
geom_bar(stat = "count") +
geom_text(aes(label = ..count..), col = "white")
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = "koi_disposition"), col = "steelblue") +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), col = "white")
loadPkg("ggplot2")
ggplot(data =  koi_df, aes(x = "koi_disposition"), col = "steelblue") +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), col = "white")
loadPkg("ggplot2")
ggplot(data =  koi_df, aes(x = koi_disposition), col = "steelblue") +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), col = "white")
loadPkg("ggplot2")
ggplot(data =  koi_df, aes(x = koi_disposition), col = koi_dispostion) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), col = "white")
loadPkg("ggplot2")
ggplot(data =  koi_df, aes(x = koi_disposition), col = koi_dispostion) +
geom_bar(fill = koi_disposition) +
geom_text(stat = "count", aes(label = ..count..), col = "white")
loadPkg("ggplot2")
ggplot(data =  koi_df, aes(x = koi_disposition), fill = koi_dispostion) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..), col = "white")
loadPkg("ggplot2")
ggplot(data =  koi_df, aes(x = koi_disposition), fill = koi_dispostion) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition), fill = koi_dispostion) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df, aes(x = koi_disposition), fill = koi_dispostion) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..))
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("stringi")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return HTML table for display
#' @examples
#' library("xt height = "300px"able")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos) %>%
kableExtra::scroll_box(width = "500px")
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=FALSE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
koi_df <- data.frame(read.csv('Kepler_Exoplanet.csv'))
length(koi_df)
koi_df1<-data.frame(subset(koi_df,select = -c(rowid,kepid,kepoi_name,kepler_name,koi_period_err1
,koi_period_err2,koi_time0bk_err1,koi_time0bk_err2,koi_impact_err1,koi_impact_err2,koi_duration_err1,koi_duration_err2,koi_depth_err1,koi_depth_err2,koi_prad_err1,koi_prad_err2,koi_teq_err1,koi_teq_err2,koi_insol_err1,koi_insol_err2,koi_steff_err1,koi_steff_err2,koi_slogg_err1,koi_slogg_err2,koi_srad_err1,koi_srad_err2,koi_tce_delivname)))
length(koi_df1)
str(koi_df1)
koi_df1 = na.exclude(koi_df1)
xkablesummary(koi_df1[3:23], title = "Summary of the numeric")
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition), fill = koi_dispostion) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition), fill = koi_dispostion) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition), col = koi_dispostion) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition), col = c("blue", "red", "yellow")) +
geom_bar() +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition))) +
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition))) +
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition)) +
geom_bar(col = c("blue", "red", "yellow")) +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition)) +
geom_bar(fill = c("blue", "red", "yellow")) +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition)) +
geom_bar(fill = koi_disposition) +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition)) +
geom_bar(fill = c("black"), col = c("blue", "red", "green")) +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition)) +
geom_bar(fill = c("grey"), col = c("blue", "red", "green")) +
geom_text(stat = "count", aes(label = ..count..))
loadPkg("ggplot2")
ggplot(data =  koi_df1, aes(x = koi_disposition)) +
geom_bar(fill = c("grey"), col = c("blue", "red", "green")) +
geom_text(stat = "count", aes(label = ..count..)) +
labs(title = "Count plot of koi_disposition")
ggplot(data =  koi_df1, aes(x = koi_pdisposition)) +
geom_bar(fill = c("grey"), col = c("blue", "red")) +
geom_text(stat = "count", aes(label = ..count..)) +
labs(title = "Count plot of koi_pdisposition")
koi_df1$koi_disposition <- ifelse(koi_df1$koi_disposition == "FALSE POSITIVE", 0,
ifelse(koi_df1$koi_disposition == "CONFIRMED", 1, 2))
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "FALSE POSITIVE"] <- 0
koi_df1$koi_pdisposition[koi_df1$koi_pdisposition == "CANDIDATE"] <- 1
koi_df1$koi_disposition = as.factor(koi_df1$koi_disposition)
koi_df1$koi_pdisposition = as.factor(koi_df1$koi_pdisposition)
str(koi_df1)
loadPkg("ggplot2")
count_koi_disposition = ggplot(data =  koi_df1, aes(x = koi_disposition)) +
geom_bar(fill = c("grey"), col = c("blue", "red", "green")) +
geom_text(stat = "count", aes(label = ..count..)) +
labs(title = "Count plot of koi_disposition")
count_koi_disposition
count_koi_pdispoition = ggplot(data =  koi_df1, aes(x = koi_pdisposition)) +
geom_bar(fill = c("grey"), col = c("blue", "red")) +
geom_text(stat = "count", aes(label = ..count..)) +
labs(title = "Count plot of koi_pdisposition")
count_koi_pdisposition
loadPkg("ggplot2")
count_koi_disposition = ggplot(data =  koi_df1, aes(x = koi_disposition)) +
geom_bar(fill = c("grey"), col = c("blue", "red", "green")) +
geom_text(stat = "count", aes(label = ..count..)) +
labs(title = "Count plot of koi_disposition")
count_koi_disposition
count_koi_pdisposition = ggplot(data =  koi_df1, aes(x = koi_pdisposition)) +
geom_bar(fill = c("grey"), col = c("blue", "red")) +
geom_text(stat = "count", aes(label = ..count..)) +
labs(title = "Count plot of koi_pdisposition")
count_koi_pdisposition
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("stringi")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return HTML table for display
#' @examples
#' library("xt height = "300px"able")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos) %>%
kableExtra::scroll_box(width = "500px")
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=FALSE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
koi_df <- data.frame(read.csv('Kepler_Exoplanet.csv'))
length(koi_df)
koi_df1<-data.frame(subset(koi_df,select = -c(rowid,kepid,kepoi_name,kepler_name,koi_period_err1
,koi_period_err2,koi_time0bk_err1,koi_time0bk_err2,koi_impact_err1,koi_impact_err2,koi_duration_err1,koi_duration_err2,koi_depth_err1,koi_depth_err2,koi_prad_err1,koi_prad_err2,koi_teq_err1,koi_teq_err2,koi_insol_err1,koi_insol_err2,koi_steff_err1,koi_steff_err2,koi_slogg_err1,koi_slogg_err2,koi_srad_err1,koi_srad_err2,koi_tce_delivname)))
length(koi_df1)
str(koi_df1)
koi_df1 = na.exclude(koi_df1)
xkablesummary(koi_df1[3:23], title = "Summary of the numeric")
loadPkg("ggplot2")
count_koi_disposition = ggplot(data =  koi_df1, aes(x = koi_disposition)) +
geom_bar(fill = c("grey"), col = c("blue", "red", "green")) +
geom_text(stat = "count", aes(label = ..count..)) +
labs(title = "Count plot of koi_disposition")
count_koi_disposition
count_koi_pdisposition = ggplot(data =  koi_df1, aes(x = koi_pdisposition)) +
geom_bar(fill = c("grey"), col = c("blue", "red")) +
geom_text(stat = "count", aes(label = ..count..)) +
labs(title = "Count plot of koi_pdisposition")
count_koi_pdisposition
loadPkg("car")
loadPkg("corrplot")
loadPkg("lattice")
koi_corr=cor(koi_df1)
koi_df1 = na.exclude(koi_df1)
xkablesummary(koi_df1[c(3, 7:23)], title = "Summary of the numeric")
koi_df1 = na.exclude(koi_df1)
xkablesummary(koi_df1[c(3, 8:23)], title = "Summary of the numeric")
shapiro.test(koi_df1$koi_period)
shapiro.test(koi_df1$koi_period[0:5000])
shapiro.test(koi_df1$koi_period[0:5000])
qqPlot(koi_df1$koi_period)
shapiro.test(koi_df1$koi_period[0:5000])
shapiro.test(koi_df1$koi_period[0:5000])
qqnorm(koi_df1$koi_period, pch = 1, frame = FALSE)
qqline(koi_df1$koi_period, col = "blue", lwd = 2)
shapiro.test(koi_df1$koi_period[0:5000])
qqnorm(koi_df1$koi_period, pch = 1, frame = FALSE, title = "QQ-plot of koi period")
qqline(koi_df1$koi_period, col = "blue", lwd = 2)
shapiro.test(koi_df1$koi_period[0:5000])
qqnorm(koi_df1$koi_period, pch = 1, frame = FALSE, title = "QQ-plot of koi period")
shapiro.test(koi_df1$koi_period[0:5000])
qqnorm(koi_df1$koi_period, pch = 1, frame = FALSE, title = "QQ-plot of koi period")
qqline(koi_df1$koi_period, col = "blue", lwd = 2)
shapiro.test(koi_df1$koi_period[0:5000])
qqnorm(koi_df1$koi_period, pch = 1, frame = FALSE, main = "QQ-plot of koi period")
qqline(koi_df1$koi_period, col = "blue", lwd = 2)
View(koi_df1)
