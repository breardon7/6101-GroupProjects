# K= 17 has the best accuracy 0.638, still worse than multi-logistic
knn_pred <- knn(train = koi_trainX,test=koi_testX,cl = koi_trainLabels_dis,k = 17)
knn_cm <- confusionMatrix(knn_pred,koi_testLabels_dis)
knn_cm     # confusion matrix for 17-NN
loadPkg("pROC")
logmod_pred
loadPkg("pROC")
prob=predict(logmod_koi, type = "response" )
loadPkg("pROC")
prob=predict(logmod_koi, type = "response" )
loadPkg("pROC")
prob=logmod_pred
a <- roc(koi_disposition~prob, data=koi_df1)
loadPkg("pROC")
prob=logmod_pred
a <- roc(koi_disposition~prob, data=koi_test_dis)
loadPkg("pROC")
prob=logmod_pred
a <- roc(koi_test_dis, porb)
loadPkg("pROC")
prob=logmod_pred
a <- roc(koi_test_dis, prob)
loadPkg("pROC")
prob=logmod_pred
prob
a <- roc(koi_test_dis, prob)
loadPkg("pROC")
prob = predict(logmod_koi, newdata = koi_test_dis, "probs")
a <- roc(koi_test_dis, prob)
loadPkg("pROC")
prob = predict(logmod_koi, newdata = koi_test_dis, "probs")
prob
a <- roc(koi_test_dis, prob)
loadPkg("pROC")
prob = predict(logmod_koi, newdata = koi_test_dis, "probs")
a <- roc(koi_test_dis, prob)
loadPkg("pROC")
prob = predict(logmod_koi, newdata = koi_test_dis, "probs")
a <- roc(prob)
loadPkg("pROC")
prob = predict(logmod_koi, newdata = koi_test_dis, "probs")
a <- roc(koi_disposition~prob, data=koi_test_dis)
loadPkg("pROC")
prob = predict(logmod_koi, newdata = koi_test_dis, "probs")
prob
a <- roc(koi_disposition~prob, data=koi_test_dis)
loadPkg("pROC")
prob = predict(logmod_koi, newdata = koi_test_dis, "probs")
a <- roc(koi_disposition~prob, data=koi_test_dis)
loadPkg("pROC")
prob=knn(train = koi_trainX,test=koi_testX,cl = koi_trainLabels_dis,k = 17, prob=T)
prob=attr(prob, "prob")
a <- roc(koi_testLabels_dis, prob1)
loadPkg("pROC")
prob=knn(train = koi_trainX,test=koi_testX,cl = koi_trainLabels_dis,k = 17, prob=T)
prob=attr(prob, "prob")
a <- roc(koi_testLabels_dis, prob)
auc(a)
plot(a)
loadPkg("pROC")
prob=predict(logmod_koi, type = "response" )
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
prob <- data.frame(koi_test_dis,pred)
a <- roc(koi_disposition~prob, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
prob <- data.frame(koi_test_dis,pred)
prob
a <- roc(koi_disposition~prob, data=koi_test_dis)
prob=knn(train = koi_trainX,test=koi_testX,cl = koi_trainLabels_dis,k = 17, prob=T)
prob=attr(prob, "prob")
b <- roc(koi_testLabels_dis, prob)
auc(b)
plot(b)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
prob <- data.frame(koi_test_dis,pred)
a <- roc(koi_test_dis, prob)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
prob1 <- data.frame(koi_test_dis,pred)
a <- roc(koi_test_dis, prob1)
prob=knn(train = koi_trainX,test=koi_testX,cl = koi_trainLabels_dis,k = 17, prob=T)
prob=attr(prob, "prob")
b <- roc(koi_testLabels_dis, prob)
auc(b)
plot(b)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
prob1 <- data.frame(koi_test_dis,pred)
a <- roc(koi_disposition~prob1, koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
pred
a <- roc(koi_disposition~prob1, koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
prob1 <- data.frame(koi_test_dis,pred)
prob1
a <- roc(koi_disposition~prob1, koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc( koi_test_dis, pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, koi_test_dis)
View(koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data = koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data = koi_train_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data = koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_test_dis$prob=prob
a <- roc(koi_disposition~pred, data = koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_test_dis$pred=pred
a <- roc(koi_disposition~pred, data = koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_test_dis$pred=pred
pred
a <- roc(koi_disposition~pred, data = koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data = koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data = koi_test_dis[, 1395])
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data = koi_test_dis[, 1:1395])
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data = koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_test_dis, pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_test_dis, as.numeric(pred))
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_test_dis$koi_disposition, pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
length(pred)
a <- roc(koi_test_dis$koi_disposition, pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_train_dis$koi_disposition, pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_train_dis$koi_disposition[, 1:5994], pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_train_dis[, 1:5994], pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_train_dis[,1:5994], pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_train_dis, pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
pred
a <- roc(koi_train_dis, pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_train_dis, pred)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_train_dis$pred=pred
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_test_dis$pred=pred
a <- roc(koi_disposition~prob, data=koi_test_dis)
auc(a)
plot(a)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_test_dis$pred=pred
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_test_dis$pred=pred
a <- roc(koi_disposition~pred, data=koi_train_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_test_dis$pred=pred
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_test_dis$pred=pred
length(pred)
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
koi_test_dis$pred=pred
a <- roc(koi_disposition~pred, data=koi_train_dis)
loadPkg("pROC")
pred<- data.frame(predict(logmod_koi, koi_test_dis, type='probs'))
a <- roc(koi_disposition~pred, data=koi_train_dis)
loadPkg("pROC")
pred<- data.frame(predict(logmod_koi, koi_test_dis, type='probs'))
pred
a <- roc(koi_disposition~pred, data=koi_train_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, type='probs')
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, type='probs')
koi_test_dis$pred=pred
loadPkg("pROC")
pred<- predict(logmod_koi, type='probs')
koi_train_dis$pred=pred
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred[, 1], data=koi_test_dis)
auc(a)
plot(a)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred[, 2], data=koi_test_dis)
auc(a)
plot(a) # it doesn't look so right.
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred[, 1000], data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred[, 90], data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred[, 3], data=koi_test_dis)
auc(a)
plot(a) # it doesn't look so right.
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred[, 1], data=koi_test_dis)
auc(a)
plot(a) # it doesn't look so right.
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
pred[, 1]
a <- roc(koi_disposition~pred, data=koi_test_dis)
loadPkg("pROC")
pred<- predict(logmod_koi, koi_test_dis, type='probs')
a <- roc(koi_disposition~pred[,1], data=koi_test_dis)
auc(a)
plot(a) # it doesn't look so right.
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
loadPkg("kableExtra")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
loadPkg("kableExtra")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
loadPkg("kableExtra")
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
#loadPkg("kableExtra")
loadPkg("stringi")
loadPkg("xtable")
#loadPkg("kableExtra")
#loadPkg("stringi")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return HTML table for display
#' @examples
#' library("xt height = "300px"able")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos) %>%
kableExtra::scroll_box(width = "500px")
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=FALSE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
#loadPkg("kableExtra")
#loadPkg("stringi")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return HTML table for display
#' @examples
#' library("xt height = "300px"able")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos) %>%
kableExtra::scroll_box(width = "500px")
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=FALSE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
koi_df_orig <- data.frame(read.csv('Kepler_Exoplanet.csv'))
length(koi_df_orig)
koi_df<-data.frame(subset(koi_df_orig,select = -c(rowid,kepid,kepoi_name,kepler_name, koi_teq_err1,koi_teq_err2,koi_tce_delivname)))
koi_df1<-data.frame(subset(koi_df,select =   -c(koi_period_err1,koi_period_err2,koi_time0bk_err1,koi_time0bk_err2,koi_impact_err1,koi_impact_err2,koi_duration_err1,koi_duration_err2,koi_depth_err1,koi_depth_err2,koi_prad_err1,koi_prad_err2,koi_insol_err1,koi_insol_err2,koi_steff_err1,koi_steff_err2,koi_slogg_err1,koi_slogg_err2,koi_srad_err1,koi_srad_err2)))
length(koi_df1)
str(koi_df1)
koi_df1 = na.exclude(koi_df1)
xkablesummary(koi_df1[c(3, 8:23)], title = "Summary of the numeric")
