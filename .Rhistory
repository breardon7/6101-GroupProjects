# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
sun_per_direction = lm(sunlight_total ~ sunlight_north + sunlight_south + sunlight_west + sunlight_east, data=citydf1)
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("stringi")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return HTML table for display
#' @examples
#' library("xt height = "300px"able")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos) %>%
kableExtra::scroll_box(width = "500px")
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=FALSE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
column_desc <- data.frame(read.csv('metadata.csv'))
citydf <- data.frame(read.csv('city.csv'))
statedf<-data.frame(read.csv('state.csv'))
citydf1<-subset(citydf,select = -c(number_of_panels_median, yearly_sunlight_kwh_median, install_size_kw_buckets_json))
statedf1<-subset(statedf,select = -c(number_of_panels_median, yearly_sunlight_kwh_median, install_size_kw_buckets_json))
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_kw_threshold_avg"]<- "threshold_kw_avg"
names(citydf1)[names(citydf1)=="number_of_panels_n"]<- "panels_north"
names(citydf1)[names(citydf1)=="number_of_panels_s"]<- "panels_south"
names(citydf1)[names(citydf1)=="number_of_panels_e"]<- "panels_east"
names(citydf1)[names(citydf1)=="number_of_panels_w"]<- "panels_west"
names(citydf1)[names(citydf1)=="number_of_panels_f"]<- "panels_flat"
names(citydf1)[names(citydf1)=="number_of_panels_total"]<- "panels_total"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_n"]<- "sunlight_north"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_s"]<- "sunlight_south"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_e"]<- "sunlight_east"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_w"]<- "sunlight_west"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_f"]<- "sunlight_flat"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_total"]<- "sunlight_total"
names(citydf1)[names(citydf1)=="carbon_offset_metric_tons"]<- "carbon_offset"
names(citydf1)[names(citydf1)=="existing_installs_count"]<- "count_existing"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_kw_threshold_avg"]<- "threshold_kw_avg"
names(statedf1)[names(statedf1)=="number_of_panels_n"]<- "panels_north"
names(statedf1)[names(statedf1)=="number_of_panels_s"]<- "panels_south"
names(statedf1)[names(statedf1)=="number_of_panels_e"]<- "panels_east"
names(statedf1)[names(statedf1)=="number_of_panels_w"]<- "panels_west"
names(statedf1)[names(statedf1)=="number_of_panels_f"]<- "panels_flat"
names(statedf1)[names(statedf1)=="number_of_panels_total"]<- "panels_total"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_n"]<- "sunlight_north"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_s"]<- "sunlight_south"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_e"]<- "sunlight_east"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_w"]<- "sunlight_west"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_f"]<- "sunlight_flat"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_total"]<- "sunlight_total"
names(statedf1)[names(statedf1)=="carbon_offset_metric_tons"]<- "carbon_offset"
names(statedf1)[names(statedf1)=="existing_installs_count"]<- "count_existing"
citydf1$threshold_kw_avg<-as.numeric(citydf1$threshold_kw_avg)
citydf1$panels_total<-as.numeric(citydf1$panels_total)
citydf1$kw_median<-as.numeric(citydf1$kw_median)
citydf1$kw_total<-as.numeric(citydf1$kw_total)
citydf1$sunlight_total<-as.numeric(citydf1$sunlight_total)
statedf1$threshold_kw_avg<-as.numeric(statedf1$threshold_kw_avg)
statedf1$panels_total<-as.numeric(statedf1$panels_total)
statedf1$kw_median<-as.numeric(statedf1$kw_median)
statedf1$kw_total<-as.numeric(statedf1$kw_total)
statedf1$sunlight_total<-as.numeric(statedf1$sunlight_total)
city_numcols <- unlist(lapply(citydf1, is.numeric))  # Identify the numeric and integer columns #
state_numcols <- unlist(lapply(statedf1, is.numeric))
city_num <- citydf1[, city_numcols]
state_num <- statedf1[, state_numcols]
city_num <- na.exclude(city_num)          # Exclude the na values without removing them #
state_num <- na.exclude(state_num)        # Or na.omit() to delete them #
xkablesummary(city_num, title = "summary of citydf1") # change back to citydf1 if unwanted #
xkablesummary(state_num,title = "summary of statedf1") # change back to statedf1 if unwanted #
#The table is now looks a little weird below. Delete line 69 and the %>% above it if unwanted. #
loadPkg('car')
sun_per_direction = lm(sunlight_total ~ sunlight_north + sunlight_south + sunlight_west + sunlight_east, data=citydf1)
xkabledply(sun_per_direction)
summary(sun_per_direction)
vif(sun_per_direction)
sun_per_direction = lm(sunlight_total ~ sunlight_north + sunlight_south + sunlight_west + sunlight_east, data=city_num)
xkabledply(sun_per_direction)
summary(sun_per_direction)
vif(sun_per_direction)
# Look at effect of directional facing buildings per different longitude/latitude (i.e. cities in the north might have higher energy generation potential from south facing, and vice versa.)
# "The geographic center of the contiguous United States as located in a 1918 survey is located at 39°50′ -98°35′, about 2.6 miles (4.2 km) northwest of the center of Lebanon, Kansas, approximately 12 miles (19 km) south of the Kansas–Nebraska border." source: https://en.wikipedia.org/wiki/Geographic_center_of_the_United_States#:~:text=The%20geographic%20center%20of%20the%20contiguous%20United%20States%20as%20located,of%20the%20Kansas%E2%80%93Nebraska%20border.
north_us_city = subset(citydf1, lat_min >39.5)
south_us_city = subset(citydf1, lat_max <39.5)
# Effect of north/south/east/west directional facing roofs on total estimated sunlight per city. Separated into two subsets: northern US cities (having a minimum latitude of 39.5 or greater) and southern US cities (having a maximum latitude of 39.5 or less). Subsets allow us to analyze if the different directional facings roofs have separate impacts depending on which part of the country they exist in.
# Can subset further to measure effects per region (northeast, southeast, mid west, west, etc.)
sun_per_direction_north = lm(sunlight_total ~ sunlight_north + sunlight_south + sunlight_west + sunlight_east, data=north_us_city)
sun_per_direction_south = lm(sunlight_total ~ sunlight_north + sunlight_south + sunlight_west + sunlight_east, data=south_us_city)
summary(sun_per_direction_north)
vif(sun_per_direction_north)
summary(sun_per_direction_south)
vif(sun_per_direction_south)
# testing out new model
# VIF error might mean perfect collinearity
offset = lm(carbon_offset ~ kw_total + panels_total + sunlight_total, data = citydf1)
summary(offset)
vif(offset)
# use this function to conveniently load libraries and work smoothly with knitting
# can add quietly=T option to the require() function
loadPkg = function(x) { if (!require(x,character.only=T, quietly =T)) { install.packages(x,dep=T,repos="http://cran.us.r-project.org"); if(!require(x,character.only=T)) stop("Package not found") } }
# unload/detact package when done using it
unloadPkg = function(pkg, character.only = FALSE) {
if(!character.only) { pkg <- as.character(substitute(pkg)) }
search_item <- paste("package", pkg,sep = ":")
while(search_item %in% search()) { detach(search_item, unload = TRUE, character.only = TRUE) }
}
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("xtable")
loadPkg("kableExtra")
loadPkg("stringi")
xkabledply = function(modelsmmrytable, title="Table", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display model summary.
#' wrapper for the base::summary function on model objects
#' ELo 202004 GWU DATS
#' version 1.2
#' @param modelsmmrytable This can be a generic table, a model object such as lm(), or the summary of a model object summary(lm())
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return HTML table for display
#' @examples
#' library("xt height = "300px"able")
#' library("kableExtra")
#' xkabledply( df, title="Table testing", pos="left", bso="hover" )
modelsmmrytable %>%
xtable() %>%
kable(caption = title, digits = digits) %>%
kable_styling(bootstrap_options = bso, full_width = FALSE, position = pos) %>%
kableExtra::scroll_box(width = "500px")
}
xkablesummary = function(df, title="Table: Statistics summary.", digits = 4, pos="left", bso="striped") {
#' Combining base::summary, xtable, and kableExtra, to easily display numeric variable summary of dataframes.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param df The dataframe.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @return The HTML summary table for display, or for knitr to process into other formats
#' @examples
#' xkablesummary( faraway::ozone )
#' xkablesummary( ISLR::Hitters, title="Five number summary", pos="left", bso="hover"  )
s = summary(df) %>%
apply( 2, function(x) stringr::str_remove_all(x,c("Min.\\s*:\\s*","1st Qu.\\s*:\\s*","Median\\s*:\\s*","Mean\\s*:\\s*","3rd Qu.\\s*:\\s*","Max.\\s*:\\s*")) ) %>% # replace all leading words
apply( 2, function(x) stringr::str_trim(x, "right")) # trim trailing spaces left
colnames(s) <- stringr::str_trim(colnames(s))
if ( dim(s)[1] ==6 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max')
} else if ( dim(s)[1] ==7 ) { rownames(s) <- c('Min','Q1','Median','Mean','Q3','Max','NA') }
xkabledply(s, title=title, digits = digits, pos=pos, bso=bso )
}
xkablevif = function(model, title="VIFs of the model", digits = 3, pos="left", bso="striped", wide=FALSE) {
#' Combining faraway::vif, xtable, and kableExtra, to easily display numeric summary of VIFs for a model.
#' ELo 202004 GWU DATS
#' version 1.2
#' @param model The lm or compatible model object.
#' @param title Title of table.
#' @param digits Number of digits to display
#' @param pos Position of table, c("left","center","right")
#' @param bso bootstrap_options = c("basic", "striped", "bordered", "hover", "condensed", "responsive")
#' @param wide print table in long (FALSE) format or wide (TRUE) format
#' @return The HTML summary table of the VIFs for a model for display, or for knitr to process into other formats
#' @examples
#' xkablevif( lm(Salary~Hits+RBI, data=ISLR::Hitters, wide=T ) )
vifs = table( names(model$coefficients)[2:length(model$coefficients)] ) # remove intercept to set column names
vifs[] = faraway::vif(model) # set the values
if (wide) { vifs <- t(vifs) }
xkabledply( vifs, title=title, digits = digits, pos=pos, bso=bso )
}
column_desc <- data.frame(read.csv('metadata.csv'))
citydf <- data.frame(read.csv('city.csv'))
statedf<-data.frame(read.csv('state.csv'))
citydf1<-subset(citydf,select = -c(number_of_panels_median, yearly_sunlight_kwh_median, install_size_kw_buckets_json))
statedf1<-subset(statedf,select = -c(number_of_panels_median, yearly_sunlight_kwh_median, install_size_kw_buckets_json))
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_kw_threshold_avg"]<- "threshold_kw_avg"
names(citydf1)[names(citydf1)=="number_of_panels_n"]<- "panels_north"
names(citydf1)[names(citydf1)=="number_of_panels_s"]<- "panels_south"
names(citydf1)[names(citydf1)=="number_of_panels_e"]<- "panels_east"
names(citydf1)[names(citydf1)=="number_of_panels_w"]<- "panels_west"
names(citydf1)[names(citydf1)=="number_of_panels_f"]<- "panels_flat"
names(citydf1)[names(citydf1)=="number_of_panels_total"]<- "panels_total"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_n"]<- "sunlight_north"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_s"]<- "sunlight_south"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_e"]<- "sunlight_east"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_w"]<- "sunlight_west"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_f"]<- "sunlight_flat"
names(citydf1)[names(citydf1)=="yearly_sunlight_kwh_total"]<- "sunlight_total"
names(citydf1)[names(citydf1)=="carbon_offset_metric_tons"]<- "carbon_offset"
names(citydf1)[names(citydf1)=="existing_installs_count"]<- "count_existing"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_kw_threshold_avg"]<- "threshold_kw_avg"
names(statedf1)[names(statedf1)=="number_of_panels_n"]<- "panels_north"
names(statedf1)[names(statedf1)=="number_of_panels_s"]<- "panels_south"
names(statedf1)[names(statedf1)=="number_of_panels_e"]<- "panels_east"
names(statedf1)[names(statedf1)=="number_of_panels_w"]<- "panels_west"
names(statedf1)[names(statedf1)=="number_of_panels_f"]<- "panels_flat"
names(statedf1)[names(statedf1)=="number_of_panels_total"]<- "panels_total"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_n"]<- "sunlight_north"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_s"]<- "sunlight_south"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_e"]<- "sunlight_east"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_w"]<- "sunlight_west"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_f"]<- "sunlight_flat"
names(statedf1)[names(statedf1)=="yearly_sunlight_kwh_total"]<- "sunlight_total"
names(statedf1)[names(statedf1)=="carbon_offset_metric_tons"]<- "carbon_offset"
names(statedf1)[names(statedf1)=="existing_installs_count"]<- "count_existing"
citydf1$threshold_kw_avg<-as.numeric(citydf1$threshold_kw_avg)
citydf1$panels_total<-as.numeric(citydf1$panels_total)
citydf1$kw_median<-as.numeric(citydf1$kw_median)
citydf1$kw_total<-as.numeric(citydf1$kw_total)
citydf1$sunlight_total<-as.numeric(citydf1$sunlight_total)
statedf1$threshold_kw_avg<-as.numeric(statedf1$threshold_kw_avg)
statedf1$panels_total<-as.numeric(statedf1$panels_total)
statedf1$kw_median<-as.numeric(statedf1$kw_median)
statedf1$kw_total<-as.numeric(statedf1$kw_total)
statedf1$sunlight_total<-as.numeric(statedf1$sunlight_total)
city_numcols <- unlist(lapply(citydf1, is.numeric))  # Identify the numeric and integer columns #
state_numcols <- unlist(lapply(statedf1, is.numeric))
city_num <- citydf1[, city_numcols]
state_num <- statedf1[, state_numcols]
city_num <- na.exclude(city_num)          # Exclude the na values without removing them #
state_num <- na.exclude(state_num)        # Or na.omit() to delete them #
xkablesummary(city_num, title = "summary of citydf1") # change back to citydf1 if unwanted #
xkablesummary(state_num,title = "summary of statedf1") # change back to statedf1 if unwanted #
#The table is now looks a little weird below. Delete line 69 and the %>% above it if unwanted. #
loadPkg('car')
sun_per_direction = lm(sunlight_total ~ sunlight_north + sunlight_south + sunlight_west + sunlight_east, data=city_num)
xkabledply(sun_per_direction)
summary(sun_per_direction)
vif(sun_per_direction)
loadPkg('car')
corrplot(city_num, method = "number")
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
corrplot(city_num, method = "number")
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
corrplot(citydf1, method = "number")
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
corrplot(city_num, method = "number")
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
city_corr=cor(city_num)
corrplot(city_num, method = "number")
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
city_corr=cor(city_num)
corrplot(city_corr, method = "number")
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
city_corr=cor(city_num)
corrplot(city_corr, method = "number")
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
city_corr=cor(city_num)
corrplot(city_corr, method = "number")
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
city_corr=cor(city_num)
corrplot(city_corr, method = "number")
# testing out new model
# VIF error might mean perfect collinearity
offset = lm(carbon_offset ~ kw_total + panels_total + sunlight_total, data = citydf1)
summary(offset)
vif(offset)
# testing out new model
# VIF error might mean perfect collinearity
lm_offset = lm(carbon_offset ~ kw_total + panels_total + sunlight_total, data = citydf1)
summary(lm_offset)
vif(lm_offset)
# testing out new model
# VIF error might mean perfect collinearity
lm_offset = lm(carbon_offset ~ kw_total + panels_total + sunlight_total, data = city_num)
summary(lm_offset)
vif(lm_offset)
# Look at effect of directional facing buildings per different longitude/latitude (i.e. cities in the north might have higher energy generation potential from south facing, and vice versa.)
# "The geographic center of the contiguous United States as located in a 1918 survey is located at 39°50′ -98°35′, about 2.6 miles (4.2 km) northwest of the center of Lebanon, Kansas, approximately 12 miles (19 km) south of the Kansas–Nebraska border." source: https://en.wikipedia.org/wiki/Geographic_center_of_the_United_States#:~:text=The%20geographic%20center%20of%20the%20contiguous%20United%20States%20as%20located,of%20the%20Kansas%E2%80%93Nebraska%20border.
north_us_city = subset(city_num, lat_min >39.5)
south_us_city = subset(city_num, lat_max <39.5)
# Effect of north/south/east/west directional facing roofs on total estimated sunlight per city. Separated into two subsets: northern US cities (having a minimum latitude of 39.5 or greater) and southern US cities (having a maximum latitude of 39.5 or less). Subsets allow us to analyze if the different directional facings roofs have separate impacts depending on which part of the country they exist in.
# Can subset further to measure effects per region (northeast, southeast, mid west, west, etc.)
sun_per_direction_north = lm(sunlight_total ~ sunlight_north + sunlight_south + sunlight_west + sunlight_east, data=north_us_city)
sun_per_direction_south = lm(sunlight_total ~ sunlight_north + sunlight_south + sunlight_west + sunlight_east, data=south_us_city)
summary(sun_per_direction_north)
vif(sun_per_direction_north)
summary(sun_per_direction_south)
vif(sun_per_direction_south)
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
city_corr=cor(city_num)
corrplot(city_corr, method = "number")
loadPkg('car')
loadPkg("corrplot")
loadPkg("lattice")
city_corr=cor(city_num)
corrplot(city_corr, method = "number")
total_sun_north = lm(sunlight_total ~ sunlight_north, data=city_num)
total_sun_south = lm(sunlight_total ~ sunlight_south, data=city_num)
total_sun_east = lm(sunlight_total ~ sunlight_east, data=city_num)
total_sun_west = lm(sunlight_total ~ sunlight_west, data=city_num)
direction_anova = anova(total_sun_north, total_sun_south, total_sun_east, total_sun_west)
direction_anova
#summary(total_sun_north)
#summary(total_sun_south)
#summary(total_sun_east)
#summary(total_sun_west)
# testing out new model
# VIF error might mean perfect collinearity
lm_offset = lm(carbon_offset ~ kw_total + panels_total, data = city_num)
summary(lm_offset)
vif(lm_offset)
# testing out new model
# VIF error might mean perfect collinearity
lm_offset = lm(carbon_offset ~ kw_total, data = city_num)
summary(lm_offset)
vif(lm_offset)
View(column_desc)
View(city_num)
sun_per_direction = lm(sunlight_total ~ sunlight_north + sunlight_south + sunlight_west + sunlight_east + sunlight_flat, data=city_num)
xkabledply(sun_per_direction)
summary(sun_per_direction)
vif(sun_per_direction)
# testing out new model
# VIF error might mean perfect collinearity
lm_offset = lm(carbon_offset ~ kw_total + panels_total, sunlight_total, data = city_num)
summary(lm_offset)
vif(lm_offset)
# testing out new model
# VIF error might mean perfect collinearity
# lm_offset = lm(carbon_offset ~ kw_total + panels_total, sunlight_total, data = city_num)
lm_offset = lm(carbon_offset ~ kw_total, count_existing )
# testing out new model
# VIF error might mean perfect collinearity
# lm_offset = lm(carbon_offset ~ kw_total + panels_total, sunlight_total, data = city_num)
lm_offset = lm(carbon_offset ~ kw_total, count_existing , data = city_num)
summary(lm_offset)
vif(lm_offset)
# testing out new model
# VIF error might mean perfect collinearity
# lm_offset = lm(carbon_offset ~ kw_total + panels_total, sunlight_total, data = city_num)
lm_offset = lm(carbon_offset ~ kw_total + count_existing , data = city_num)
summary(lm_offset)
vif(lm_offset)
total_sun_north = lm(sunlight_total ~ sunlight_north, data=city_num)
total_sun_south = lm(sunlight_total ~ sunlight_south, data=city_num)
total_sun_east = lm(sunlight_total ~ sunlight_east, data=city_num)
total_sun_west = lm(sunlight_total ~ sunlight_west, data=city_num)
direction_anova = anova(total_sun_north, total_sun_south, total_sun_east, total_sun_west)
direction_anova
#summary(total_sun_north)
#summary(total_sun_south)
#summary(total_sun_east)
#summary(total_sun_west)
